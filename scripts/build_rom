############################################################################
#
# 本定制工具完全免费，DsiXDA版权所有，由MAL神族-沉默之星完成汉化翻译。
# 
# 理论上支持所有民间刷机包的定制，完美支持HTC的所有民间和官方刷机包！
#
# 欢迎光临全球最大中兴社区：神族论坛（http://bbs.malshenzu.com/）
#
############################################################################


clear
echo

if [ -d WORKING_* ]
then
  echo 发现工作文件夹
else
  echo 未找到工作文件夹!
  exit 0
fi

cd WORKING_*

if [ -e META-INF/com/google/android/update-script ] && [ -e META-INF/com/google/android/updater-script ]
then

  echo
  echo "  错误: update-script 和 updater-script 脚本同时存在工作文件夹中."
  echo "        请在打包 ROM 前，确保工作文件夹中只有一个刷机脚本文件!" 
  echo

  cd ..
  exit 0
fi



echo
echo "正在清除所有遗留的文件 ..."
echo

rm -f *.zip
rm -f testkey.*
rm -f signapk.jar
rm -f signed*.zip
rm -f *smali.jar

#
# Clean up *.DS_Store hidden files
#
find . -name '*.DS_Store' -type f -delete

#
# Clean up stackdump files
#
find . -name sh.exe.stackdump -type f -delete


#
# Clean up temp files left behind by interrupted Amend/Edify conversion scripts
#
if [ -d META-INF/com/google/android ]
then
  find META-INF/com/google/android/ -name 'sed*' -type f -delete
fi


#
# Clean up strange temp file issue in root of working folder
#

file_list=`find . -maxdepth 1 -type f`

for filename in $file_list
do

  filename=`echo $filename | sed 's/\.\///g'`
  header_bytes=`od -A n -H -j 0 -N 4 $filename | sed 's/ //g'`

  if [ "$header_bytes" == "04034b50" ]
  then
    echo -n "已在 root 文件夹中找到文件: $filename. 删除 (y/n)? (默认: y): "
    read delete_file

    if [ "$delete_file" != "n" ]
    then
      echo "删除 $filename"
      rm -f $filename
    else
      echo "保留 $filename"
    fi
  fi
done


cd ..
scripts/prompt_nand_type
cd WORKING_*


echo
echo `pwd`
echo
ls -lrt
cd ..
echo


scripts/fix_pre_build

# Check for 'dsixda Null'
cmd_line=`scripts/get_cmdline`

extreme=no
express=no
interactive=no

echo
echo "=========================================================================="
echo
echo "选择生成选项:"
echo
echo "  1 = 交互模式-对于大多数用户推荐"
echo "      (生成过程中进行指导操作)"
echo
echo "  2 = 懒人模式 - 一切由厨房工具自动完成"
echo "      (Zipalign优化, Edify脚本, 签名 ROM, 自动命名 ZIP)"
echo
echo "  3 = 直通模式-高级用户"
echo "      (Zipalign,Edify,不要签名ROM自动命名ZIP文件)"
echo 
echo "  4 = 极端模式-用于高级用户"
echo "      (没有 zipalign,无脚本转换,不要签名ROM,自动命名ZIP文件)"
echo 
echo "  5 = 取消 - 现在不生成ROM"
echo
echo "=========================================================================="
echo
echo -n "输入数字 (默认: 1): "

read build_mode

# Default is 1, so remember to account for Enter key
if [ "$build_mode" == "5" ]
then
  echo "取消"
  exit 0
elif [ "$build_mode" == "4" ]
then
  extreme=yes  
elif [ "$build_mode" == "3" ]
then
  express=yes 
elif [ "$build_mode" == "2" ]
then
  lazy=yes
  express=yes
else
  interactive=yes
fi


if [ "$extreme" == "no" ]
then
  scripts/do_zipalign for_build $express
fi

if [ "$?" == "1" ]
then
  echo "取消生成"
  exit 0
fi

cd WORKING_*


#
# Convert update-script (Amend) to updater-script (Edify) for the ZIP file only
#

if [ "$extreme" == "no" ] && [ -e META-INF/com/google/android/update-script ]
then
 
  cd ..
  scripts/update_script_should_convert_back
  auto_convert="$?"
  cd WORKING_*
  
  if [ "$auto_convert" == "1" ] || [ "$express" == "yes" ]
  then 
    convert_it=y
    want_file=updater-script

  else
    echo
    echo "--------------------------------------------------------------------------"
    echo 
    echo " 在 ROM 中检测到 update-script 脚本"
    echo
    echo " 确保与新版的recovery的兼容性，在你的 ROM ZIP文件中"
    echo " 可以使用updater-script (Edify) 脚本而不是"
    echo " update-script (Amend)脚本。"
    echo 
    echo " 你的工作文件夹将保持不变，并继续使用原始update-script脚本。"
    echo 
    echo -n " 使用ROM压缩文件中的updater-script脚本(y/n)? (默认: y): "
    read convert_it
  fi


  if [ "$convert_it" != "n" ]
  then

    # Remove installbusybox (it's compatible with updater-script, but
    # Edify syntax also supports run_program with multiple args)
    if [ -e installbusybox ] 
    then
      cd ..
      scripts/add_busybox_to_update_script
      cd WORKING_*
    fi

    cd ..
    scripts/convert_update_script for_zip $express

    # updater-script has been produced
    if [ "$?" != "1" ]
    then

      cd WORKING_*

      if [ "$express" == "yes" ]
      then
        proceed_change=y
      else
        echo "P保留更改并继续 (y/n)?"
        echo 
        echo "  y = 继续进行; updater-script 和 update-binary 文件将在 ZIP 文件中使用"
        echo "      update-script脚本将继续保留在工作文件夹中."
        echo "  n = 取消; updater-script 和 update-binary 将被删除"
        echo "      并不使用."
        echo
         
        echo -n "请输入选择项 （默认: y）: "
        read proceed_change 
      fi

      echo

      if [ "$proceed_change" != "n" ]
      then

        if [ -e META-INF/com/google/android/updater-script ]
        then
          ../scripts/convert_to_unix META-INF/com/google/android/updater-script 
          want_file=updater-script
        else
          echo "未发现 updater-script 脚本, 保留 update-script 脚本"
          want_file=update-script
        fi

      else
        echo
        echo "取消 - 我们将会在 ZIP 文件中使用 update-script "
        want_file=update-script
        rm -fv META-INF/com/google/android/updater-script
        rm -fv META-INF/com/google/android/update-binary
        echo
      fi


      if [ "$auto_convert" == "1" ] && [ "$proceed_change" == "n" ]
      then
        echo "你不能为此设备刷入一个 ROM ，除非有一个 updater-script 脚本."
        echo
        cd ..
        exit 0
      fi

    else
      echo "保留 update-script"
      cd WORKING_*
      want_file=update-script
    fi

  else
    echo
    echo
    echo "保留 update-script"
    want_file=update-script
  fi

  echo

else

  echo

  if [ -e META-INF/com/google/android/update-script ]
  then
    echo "发现 update-script (Amend) 脚本"
    want_file=update-script
  fi
  
  if [ -e META-INF/com/google/android/updater-script ]
  then
    echo "发现 updater-script (Edify) 脚本"
    want_file=updater-script
  fi

  echo
fi






if [ "$want_file" == "updater-script" ]
then
  script_not_want=*update-script*
  binary_not_want=""
else

  # Remove any run_program references to busybox with multiple args
  # and replace with the installbusybox script. This is compatible
  # with update-script.
  if [ -e system/xbin/busybox ]
  then
    cd ..
    scripts/add_busybox_to_update_script amend
    cd WORKING_*
  fi

  script_not_want=*updater-script*
  binary_not_want=*update-binary*
fi

if [ "$cmd_line" == "dsixda Null" ]
then
  boot_not_want=boot.img
else
  boot_not_want=""
fi


#
# Create update.zip
#
echo
echo 制作 update.zip ...

zip -r -y -q update * -x *.cvs* *.git* *.svn* \
    *updater-script.orig* *update-binary.orig* *update-script.orig* \
    $script_not_want $binary_not_want $boot_not_want


echo

# Remove updater-script from working folder if update-script already exists
cd META-INF/com/google/android
if [ -e update-script ]
then
  rm -f updater-script
  rm -f update-binary
fi

cd ../../../..


if [ -e update.zip ]
then
  echo update.zip 创建成功 
  echo
else
  echo "错误: update.zip 尚未创建!"
  cd ..
  exit 0
fi



#
# Sign update.zip if necessary
#

date_str=`date '+%m%d%y_%H%M%S'`

cd ..
device=`scripts/get_device_name | sed 's/ /_/g'`
cd WORKING_*


sign_update=no
sign_str=unsigned

if [ "$lazy" == "yes" ]
then
  do_sign=y
else
  do_sign=n
fi

if [ "$interactive" == "yes" ]
then
  echo
  echo "建议你签名你的ROM文件。"
  echo -n "是否签名(y/n)? (默认: y): "
  read do_sign
fi

if [ "$do_sign" != "n" ]
then
  sign_update=yes
  sign_str=signed
fi

final_file=$device\_$sign_str\_$date_str.zip


if [ "$sign_update" == "no" ]
then
  mv update.zip $final_file
  res=$?

else
  echo
  echo 签名 update.zip ...

  cp ../tools/signapk_files/testkey.* .
  cp ../tools/signapk_files/signapk.jar .

  java -jar signapk.jar testkey.x509.pem testkey.pk8 update.zip $final_file
  res=$?

  rm -f testkey.*
  rm -f signapk.jar
  rm -f update.zip
fi


if [ -e $final_file ] && [ "$res" == "0" ]
then

  #
  # Rename zip
  #
  if [ "$interactive" == "yes" ]
  then
    cd ..
    final_file2=`scripts/set_update_name $final_file`
    cd WORKING_*
    if [ "$final_file2" != "$final_file" ]
    then
      mv -fv $final_file $final_file2
      final_file=$final_file2
    fi
  fi

  echo

  #
  # Make output folder
  #
  if [ -d ../OUTPUT_ZIP ]
  then
    echo "发现 OUTPUT_ZIP 文件夹" 
  else
    echo "创建  OUTPUT_ZIP 文件夹 ..."
    mkdir ../OUTPUT_ZIP
  fi

  mv $final_file ../OUTPUT_ZIP/

  echo
  echo
  echo
  echo "=========================================================================="
  echo
  echo "恭喜你，你定制的 ROM 文件位置在 :"
  echo
  echo "----> OUTPUT_ZIP/$final_file" 
  echo
  echo "复制ROM文件到手机内存卡，然后进入recovery菜单刷入手机"
  echo
  echo "注意1：如有必要请记得在刷机之前恢复出厂设置或执行wipe操作清除数据"
  echo
  echo "注意2：请务必参阅Android厨房在 xda-developers.com 上的问题解答中的常见的问题，如："
  echo
  echo " - 刷机错误 (例如 Status 0)"
  echo " - 刷入 ZIP 刷机包后不能启动"

  if [ "$sign_update" == "no" ]
  then
    echo
    echo "注意3: 你需要在recovery菜单选项中禁用签名校验功能来刷入这个ROM"
    echo " 如果你稍后想签名这个ROM，请使用厨房高级菜单中签名ZIP选项。"
  fi

  echo
  echo "祝你好运!"

else

  echo
  echo "未能创建 $final_file!"
  echo

  if [ "$sign_update" == "yes" ]
  then
    if [ `uname | grep Linux` ] 
    then
      echo "确保你有安装最新版本的 Sun Java JDK"
    
    elif [ `uname | grep CYGWIN` ]
    then
      echo " 确保你的电脑已安装 Sun Java JDK" 
      echo " 如果已安装 JDK，请确定是否正确定义了环境变量安装路径"
      echo " 例如 In $HOME/.bash_profile, add to the end:"
      echo " PATH=/cygdrive/c/Program\ Files/Java/jdk1.6.0_18/bin:\${PATH}" 
      echo 
      echo "      上面是一个例子，你的路径可能会不同。"

    elif [ `sw_vers | grep -o Mac` ]
    then
      echo "你可能需要为 Mac OS X 安装 SoyLatte"
      echo "(以替换标准的 Java JDK)"
    fi
  fi
fi

cd ..

# System beep
echo 

