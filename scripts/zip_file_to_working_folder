############################################################################
#
# 本定制工具完全免费，DsiXDA版权所有，由MAL神族-沉默之星完成汉化翻译。
# 
# 理论上支持所有民间刷机包的定制，完美支持HTC的所有民间和官方刷机包！
#
# 欢迎光临全球最大中兴社区：神族论坛（http://bbs.malshenzu.com/）
#
############################################################################

#
# This script has two arguments:
#
# $1 = file name (mandatory)
# $2 = "kernel_only" or "name_given" (optional)
#


update_file=$1
 
echo "已选择 $update_file"

# Trim spaces in file name
update_file2=`echo $update_file | tr ' ' '_'`

if [ "$update_file" != "$update_file2" ]
then
  echo "重命名为 $update_file2"
  mv "original_update/$update_file" original_update/$update_file2
  update_file=$update_file2
fi

#
# Working folder name
#
build_dir=`scripts/set_working_folder_name $2` 


#
# Creating folder structure
#

echo
echo "创建工作文件夹 $build_dir ..."
mkdir $build_dir

echo
echo "从 ZIP 文件中解压 ROM ..."

if [ `uname | grep CYGWIN` ]
then

  #
  # Instead of 'unzip -qo' (the 'o' would force overwrite), show the user a prompt if a duplicate filename is encountered;
  # e.g. In a case where we have /system/lib/libdivxdrm.so and /system/lib/libDivxDrm.so, it would ask to overwrite/rename
  # or ignore one of them.  This way, the user won't be unaware of the duplicate file name.
  #
  # To show the prompt in the unzip command, disable the output to /dev/null. To prevent displaying warnings about excluded  
  # files (because /dev/null is not used anymore) put them in the 'rm' command instead of in unzip's '-x' arguments.
  #
  # This is not a faster method than "unzip -q ... -x ... 2>/dev/null", but it prevents the kitchen from hanging at unzip.
  #
  # Also, this is just a workaround, it doesn't fix the duplicate file name issue. You have two options to fix the issue:
  #
  # 1) Use an operating system that uses case-sensitive file names (Linux or OS X)
  # 2) In the Windows registry, set HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\kernel\obcaseinsensitive to 0 and
  #    reboot... but do this at your own risk.
  #
  unzip -q original_update/$update_file -d $build_dir 2>&1 | tee unzip.log
  unzip_result=$?
  
  rm -f bootloader.img recovery.img recovery_signed.img userdata.img radio.img rcdata.img splash1.nb0 splash2.nb0 android-info.txt 

  replace_count=`grep -c replace unzip.log`
  rm -f unzip.log

  if [ $replace_count -gt 0 ]
  then
    echo
    echo
    echo "警告"
    echo "-------"
    echo "你的 ZIP 压缩包中有两个名字相同但大小写不同的文件，这是你看到上述提示的原因。"
    echo "因为 Windows 是不区分大小写的，它把两个文件都作为一个单独的文件，"
    echo "而不是两个不同的文件！"
    echo
    echo "您可以选择忽略这个问题，或者退出。有两种方法来解决这个问题："
    echo 
    echo "1) 使用区分大小写的系统 (如 Linux 或 OS X), 或者"
    echo "2) 在 Windows 的注册表中设置: "
    echo "   HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\kernel\obcaseinsensitive 为 0"
    echo "   并重启. 然而，这会影响所有的Windows - 这样做后果自负!"
    echo 
    echo
    echo -n "你想忽略这个问题么 (y/n)? (默认: n): "
    read do_ignore

    if [ "$do_ignore" != "y" ]
    then
      echo
      echo "OK, 正在中止"
      cd ..
      exit 1
    else
      echo
      echo "OK, 已忽略, 但你的 ROM 也许会存在稳定性问题!"
    fi
  fi

else
  unzip -q original_update/$update_file -d $build_dir -x bootloader.img recovery.img recovery_signed.img userdata.img radio.img rcdata.img splash1.nb0 splash2.nb0 android-info.txt 2>/dev/null

  unzip_result=$?

fi

if [ "$unzip_result" == "9" ]
then
  echo
  echo "错误: 未能解压 ROM!"
  cd ..
  exit 1
fi

cd $build_dir



#
# Check for the required IMG files
#

echo

if [ "`find . -maxdepth 1 | grep .img | grep -c system_`" == "1" ]
then
  echo "重命名 ..."
  mv -v system_*.img system.img
fi 

rm -vf hboot*.img

if [ "`find . -maxdepth 1 | grep .img | grep -c boot_`" == "1" ]
then
  echo "重命名 ..."
  mv -v boot_*.img boot.img
fi 

if [ "`find . -maxdepth 1 | grep .img | grep -c lib_`" == "1" ]
then
  echo "重命名 ..."
  mv -v lib_*.img lib.img
fi 


if [ -e system.img ] && [ ! -d system ]
then

  echo
  echo "发现 system.img"
  mkdir ../temp_img
  mv system.img ../temp_img

  if [ -e boot.img ]
  then
    echo "发现 boot.img"
    mv boot.img ../temp_img
  fi

  if [ -e lib.img ]
  then
    echo "发现 lib.img"
    mv lib.img ../temp_img
  fi

  echo
  rm -vf *
  mv ../temp_img/* .
  rmdir ../temp_img

  cd ..
  scripts/img_files_to_working_folder no_create $2
  exit $?


#
# Check for Samsung Galaxy S2 stock ROM
#
elif [ -e factoryfs.img ]
then
  echo 发现 factoryfs.img

  if [ -e hidden.img ]
  then
    echo "发现 hidden.img"
  else
    echo "未发现 hidden.img"
  fi

  if [ -e cache.img ]
  then
    echo "发现 cache.img"
  else
    echo "警告: 未发现 cache.img"
  fi

  if [ -e zImage ]
  then
    echo "发现 zImage"
    cd ..
    scripts/show_rooted_kernel_msg
    cd $build_dir
  else
    echo "警告: 未发现 zImage"
  fi

  cd ..
  scripts/simg_files_to_working_folder no_create $2
  exit $?


#
# Check for Samsung Galaxy S2 variants such as the Skyrocket
#
elif [ -e system.img.ext4 ] 
then

  echo
  echo "发现 system.img.ext4"
  mkdir ../temp_img
  mv system.img.ext4 ../temp_img

  if [ -e boot.img ]
  then
    echo "发现 boot.img"
    mv boot.img ../temp_img
  fi

  if [ -e tomb.img.ext4 ]
  then
    echo "发现 tomb.img.ext4"
    mv tomb.img.ext4 ../temp_img
  fi

  if [ -e cache.img.ext4 ]
  then
    echo "发现 cache.img.ext4"
    mv cache.img.ext4 ../temp_img
  fi

  echo
  rm -vf *
  mv ../temp_img/* .
  rmdir ../temp_img

  cd ..
  scripts/simg_ext4_files_to_working_folder no_create $2
  exit $?



#
# Check for certain Samsung factory images
#
elif [ -e system.rfs ]
then

  cd ..
  echo "发现 system.rfs"
  scripts/rfs_files_to_working_folder no_create $2
  exit $?



#
# Check for Samsung Galaxy S2 Nandroid backup
#
elif [ -e system.ext4.tar ] 
then

  echo
  echo "发现 system.ext4.tar"
  mkdir ../temp_img
  mv system.ext4.tar ../temp_img

  if [ -e boot.img ]
  then
    echo "发现 boot.img"
    mv boot.img ../temp_img
  fi

  echo
  rm -vf *
  mv ../temp_img/* .
  rmdir ../temp_img

  cd ..
  scripts/sext4_tar_files_to_working_folder no_create $2
  exit $?


#
# Check for Samsung Galaxy S stock ROM
#
elif [ -e factoryfs.rfs ]
then
  echo 发现 factoryfs.rfs

  if [ -e cache.rfs ]
  then
    echo 发现 cache.rfs
  fi

  if [ -e zImage ]
  then
    echo "发现 zImage"
    cd ..
    scripts/show_rooted_kernel_msg
    cd $build_dir
  else
    echo "警告: 未发现 zImage"
  fi

  cd ..
  scripts/rfs_files_to_working_folder no_create $2
  exit $?

#
# Galaxy S again
#
elif [ -e PDA.tar ]
then
  echo 发现 PDA.tar

  if [ -e CSC.tar ]
  then
    echo 发现 CSC.tar
  else
    echo "警告: 未发现 CSC.tar"
  fi

  if [ -e PHONE.tar ]
  then
    echo 发现 PHONE.tar
  fi

  if [ -e zImage ]
  then
    echo "发现 zImage"
  else
    echo "警告: 未发现 zImage"
  fi

  cd ..
  scripts/sgs_tar_files_to_working_folder no_create $2
  exit $?

#
# Galaxy S yet again
#
elif [ -e PDA.tar.md5 ]
then
  echo 发现 PDA.tar.md5

  if [ -e CSC.tar.md5 ]
  then
    echo 发现 CSC.tar.md5
  else
    echo "警告: 未发现 CSC.tar.md5"
  fi

  if [ -e PHONE.tar.md5 ]
  then
    echo 发现 PHONE.tar.md5
  fi

  if [ -e zImage ]
  then
    echo "发现 zImage"
  else
    echo "警告: 未发现 zImage"
  fi

  cd ..
  scripts/sgs_tarmd5_files_to_working_folder no_create $2
  exit $?
fi




if [ -d patch ]
then

  echo 
  echo "错误: 这是一个 ROM 更新包，不是一个完整 ROM ！正在中止 ..."
  cd ..
  exit 1

elif [ ! -d system ] && [ ! -d SYSTEM ]
then

  echo
  echo "错误: 未发现 system 文件夹!"
  cd ..
  exit 1

fi

#
# Check for NAND ROM - convert the boot folder to boot.img
#
if [ ! -e boot.img ]
then
  if [ -e boot/initrd.gz ] && [ -e boot/zImage ]
  then
    echo
    echo " 已检测到 NAND ROM ，为保证兼容性"
    echo " 厨房正在转换 boot 文件夹到 boot.img"
    echo "（创建 ROM 时将会转换回去）..."

    cd ..
    scripts/ensure_nand_extracted no_clear
    scripts/build_boot_img
    cd WORKING_*

  #
  # Leaked ROMs with partitions in folder format
  # 
  elif [ -e BOOT/kernel ] && [ -e BOOT/base ] && [ -e BOOT/cmdline ] && [ -d BOOT/RAMDISK ]
  then
    echo " 分区是文件夹格式；BOOT 文件夹需要"
    echo " 转换成 boot.img ..."
   
    cd ..
    scripts/build_boot_img_from_folder_form
    cd WORKING_*

  else

    #
    # Check if ROM has no boot.img inside
    #

    build_dir=`pwd`
    cd ..
    scripts/check_no_bootimg $build_dir
    cd $build_dir

    if [ ! -e boot.img ]
    then
      echo "错误: 未发现 boot.img ，无法继续！"
      echo
      cd ..
      echo "删除 $build_dir ..."
      rm -rf $build_dir
      echo
      exit 1
    fi
  fi
fi


#
# Remove bad symlinks (*.lnk)
#
if [ -d system/bin ]
then
  rm -fv system/bin/*.lnk
fi

if [ -d system/xbin ]
then
  rm -fv system/xbin/*.lnk
fi


if [ -d META-INF ]
then
  cd META-INF 
  rm -f CERT.RSA CERT.SF MANIFEST.MF
  cd ..
else
  echo
  echo "警告: 工作文件夹中未发现 META-INF 文件夹!"
fi


cd ..
echo

if [ "$2" != "kernel_only" ] && [ "$2" != "name_given" ]
then

  scripts/check_no_update_script
  error_code=$?

  cd WORKING_*
  cd META-INF/com/google/android


  if [ -e updater-script ] && [ -e update-script ]
  then
    echo
    echo "警告: 同时发现 updater-script 和 update-script 两个不兼容的刷机脚本。"
    echo -n "删除 updater-script 脚本(y/n)? (默认: y) "

    read enterRemove
    echo

    if [ "$enterRemove" == "n" ]
    then
      echo "继续保留 updater-script, 但是必须删除 update-script 脚本"
      rm -rf update-script

      cd ../../../../..
      scripts/check_no_update_script
      error_code=$?

      cd WORKING_*
      cd META-INF/com/google/android

    else 
      echo "删除 updater-script 脚本"
      rm -f updater-script
    fi

  fi
  if [ -e update-binary ] && [ -e update-script ]
  then
    echo
    echo "警告: 同时发现 update-binary 和 update-script 两个不兼容的刷机脚本。"
    echo -n "删除 update-binary 脚本(y/n)? (默认: y) "
    read enterRemove
    if [ "$enterRemove" != "n" ]
    then
      echo "删除 update-binary"
      rm -f update-binary
    else
      echo "不删除 update-binary"
    fi
  fi


  if [ -e update-script ]
  then
    
    #
    # Remove comments to prevent issues with kitchen
    #
    sed -i -e '/^#/d' update-script
  fi

  rm -f update-script.bak

  cd ../../../../..

  #
  # Check for stuff related to stock recovery image
  #
  scripts/remove_recovery
fi

echo
echo "META-INF/com/google/android 列表:"

cd WORKING_*
cd META-INF/com/google/android
ls -l 
cd ../../../../..



#
# Completion
#

cd $build_dir

echo
echo $build_dir 列表:
ls -l 

echo

if [ -d system ]
then
  echo "工作文件夹设置已完成!"
  cd ..

  if [ "$error_code" == "1" ]
  then
    exit 1
  else
    exit 0
  fi

else
  echo "错误: 设置失败"
  cd ..
  scripts/press_enter
  exit 1
fi

cd ..

